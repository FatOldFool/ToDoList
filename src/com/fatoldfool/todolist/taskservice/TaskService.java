package com.fatoldfool.todolist.taskservice;

import com.fatoldfool.todolist.task.Task;
import com.fatoldfool.todolist.userinputvalidator.UserInputValidator;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;

public class TaskService {

    private List<Task> tasks;
    private int nextID;
    private UserInputValidator userInputValidator;
    Scanner scanner;

    public TaskService() {
        this.tasks = new ArrayList<>();
        this.nextID = 1;
        userInputValidator = new UserInputValidator();
        scanner = new Scanner(System.in);
    }

    private String askNewTaskName() {
        String title;
        while (true) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ");
            title = scanner.nextLine().trim();
            if (userInputValidator.isValidTaskName(title)) {
                return title;
            }
            System.out.println("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
        }
    }

    private int askNewTaskPriority() {
        String input;
        while (true) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1‚Äì10): ");
            input = scanner.nextLine().trim();
            if (userInputValidator.isValidTaskPriority(input)) {
                return Integer.parseInt(input);
            }
            System.out.println("‚ùó –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10.");
        }
    }

    private Task.TaskStatus askNewTaskStatus() {
        while (true) {
            System.out.println("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:");
            System.out.println("1 ‚Äì –ù–ï –í–´–ü–û–õ–ù–ï–ù–ê (NOT_COMPLETE)");
            System.out.println("2 ‚Äì –í –ü–†–û–¶–ï–°–°–ï (IN_PROGRESS)");
            System.out.println("3 ‚Äì –í–´–ü–û–õ–ù–ï–ù–ê (COMPLETE)");
            System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");
            String choice = scanner.nextLine().trim();

            switch (choice) {
                case "1":
                    return Task.TaskStatus.NOT_COMPLETE;
                case "2":
                    return Task.TaskStatus.IN_PROGRESS;
                case "3":
                    return Task.TaskStatus.COMPLETE;
                default:
                    System.out.println("‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3.");
            }
        }
    }

    private String userInputNewTaskName() {
        String title = "";

        while (true) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ");
            title = scanner.nextLine().trim();

            if (userInputValidator.isValidTaskName(title)) {
                return title;
            }

            System.out.println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.");
        }
    }

    private int userInputNewTaskPriority() {
        String input = "";

        while (true) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1‚Äì10): ");
            input = scanner.nextLine().trim();

            if (userInputValidator.isValidTaskPriority(input)) {
                return Integer.parseInt(input);
            }

            System.out.println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.");
        }
    }

    public void addTask() {
        String name = userInputNewTaskName();
        int priority = userInputNewTaskPriority();
        tasks.add(new Task(nextID++, name, priority));
        System.out.println("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
    }

    public void deleteTask(int id) {

        if (userInputValidator.isValidTaskId(id, tasks)) {
            Iterator<Task> it = tasks.iterator();
            while (it.hasNext()) {
                if (it.next().getId() == id) {
                    it.remove();
                    System.out.println("üóëÔ∏è –ó–∞–¥–∞—á–∞ —Å id=" + id + " —É–¥–∞–ª–µ–Ω–∞.");
                    break;
                }
            }
        } else {
            System.out.println("‚ùó –ó–∞–¥–∞—á–∞ —Å id=" + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        }

    }

    public void editTask(int id) {
        if (!userInputValidator.isValidTaskId(id, tasks)) {
            System.out.println("‚ùó –ó–∞–¥–∞—á–∞ —Å id=" + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        Task taskToEdit = null;
        for (Task t : tasks) {
            if (t.getId() == id) {
                taskToEdit = t;
                break;
            }
        }

        System.out.println("\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?");
        System.out.println("1 ‚Äì –ù–∞–∑–≤–∞–Ω–∏–µ");
        System.out.println("2 ‚Äì –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç");
        System.out.println("3 ‚Äì –û–±–∞ –ø–æ–ª—è");
        System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");
        String choice = scanner.nextLine().trim();

        switch (choice) {
            case "1":
                String newName = askNewTaskName();
                taskToEdit.setTitle(newName);
                System.out.println("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.");
                break;
            case "2":
                int newPriority = askNewTaskPriority();
                taskToEdit.setPriority(newPriority);
                System.out.println("‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.");
                break;
            case "3":
                newName = askNewTaskName();
                newPriority = askNewTaskPriority();
                taskToEdit.setTitle(newName);
                taskToEdit.setPriority(newPriority);
                System.out.println("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
                break;
            default:
                System.out.println("‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
        }
    }

    public void changeTaskStatus(int id) {

        if (!userInputValidator.isValidTaskId(id, tasks)) {
            System.out.println("‚ùó –ó–∞–¥–∞—á–∞ —Å id=" + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        Task task = null;
        for (Task t : tasks) {
            if (t.getId() == id) {
                task = t;
                break;
            }
        }

        System.out.println("\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: " + task.getTaskStatus());
        Task.TaskStatus newStatus = askNewTaskStatus();

        task.setTaskStatus(newStatus);
        System.out.println("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ " + newStatus);
    }

    public void showAllTasks() {

        if (userInputValidator.hasTasks(tasks)) {
            System.out.println("\n=== –í—Å–µ –∑–∞–¥–∞—á–∏ ===");
            for (Task task : tasks) {
                System.out.println(task);
            }
        }
    }

    public void filterTaskByStatus() {

        if (userInputValidator.hasTasks(tasks)) {
            List<Task> completedTasks = new ArrayList<>();
            List<Task> inProgressTasks = new ArrayList<>();
            List<Task> notCompletedTasks = new ArrayList<>();

            for (Task task : tasks) {
                switch (task.getTaskStatus()) {
                    case COMPLETE:
                        completedTasks.add(task);
                        break;
                    case IN_PROGRESS:
                        inProgressTasks.add(task);
                        break;
                    case NOT_COMPLETE:
                        notCompletedTasks.add(task);
                        break;
                }
            }

            if (!completedTasks.isEmpty()) {
                System.out.println("\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:");
                for (Task task : completedTasks) {
                    System.out.println(task);
                }
            }

            if (!inProgressTasks.isEmpty()) {
                System.out.println("\n‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ:");
                for (Task task : inProgressTasks) {
                    System.out.println(task);
                }
            }

            if (!notCompletedTasks.isEmpty()) {
                System.out.println("\n‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:");
                for (Task task : notCompletedTasks) {
                    System.out.println(task);
                }
            }
        }
    }

    private String userInputKeyword() {
        while (true) {
            System.out.print("\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∑–∞–¥–∞—á: ");
            String kw = scanner.nextLine().trim();
            if (!kw.isEmpty()) {
                return kw;
            }
            System.out.println("‚ùó –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
        }
    }

    private List<Task> searchByKeyword(String normalized) {
        List<Task> found = new ArrayList<>();
        for (Task task : tasks) {
            if (task.getTitle() != null &&
                    task.getTitle().toLowerCase().contains(normalized)) {
                found.add(task);
            }
        }
        return found;
    }

    public void findTaskByKeyWord() {

        if (!userInputValidator.hasTasks(tasks)) {
            //System.out.println("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–∫–∞ –ø—É—Å—Ç.");
            return;
        }

        String rawKeyword = userInputKeyword();
        String normalized = rawKeyword.toLowerCase();

        List<Task> found = searchByKeyword(normalized);

        if (found.isEmpty()) {
            System.out.println("üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É \"" + rawKeyword + "\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        } else {
            System.out.println("\nüîé –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: " + found.size());
            for (Task t : found) {
                System.out.println(t);
            }
        }
    }

    public void showStatistics() {
        int complete = 0;
        int inProgress = 0;
        int notComplete = 0;
        double totalPriority = 0;
        int taskCount = 0;

        for (Task task : tasks) {
            switch (task.getTaskStatus()) {
                case COMPLETE:
                    complete++;
                    break;
                case IN_PROGRESS:
                    inProgress++;
                    break;
                case NOT_COMPLETE:
                    notComplete++;
                    break;
            }
            totalPriority += task.getPriority();
            taskCount++;
        }

        System.out.println("\nüìä === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á ===");

        System.out.println("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + complete);
        System.out.println("‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: " + inProgress);
        System.out.println("‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: " + notComplete);

        double averagePriority = totalPriority / taskCount;
        System.out.printf("üìà –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: %.2f\n", averagePriority);

        System.out.println("üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: " + taskCount);
    }

    public void exit() {
        System.out.println("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è... –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ TodoList!");
        System.exit(0);
    }

    public List<Task> getTask() {
        return tasks;
    }
}